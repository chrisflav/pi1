import Mathlib.AlgebraicGeometry.Morphisms.Constructors
import Pi1.Mathlib.CategoryTheory.MorphismProperty.Limits

universe u

open TopologicalSpace CategoryTheory CategoryTheory.Limits Opposite

noncomputable section

namespace AlgebraicGeometry

variable (P : ‚àÄ {Œ± Œ≤ : Type u} [TopologicalSpace Œ±] [TopologicalSpace Œ≤], (Œ± ‚Üí Œ≤) ‚Üí Prop)

lemma topologically_isLocalAtSource [(topologically P).RespectsIso]
    (hP‚ÇÅ : ‚àÄ {X Y : Type u} [TopologicalSpace X] [TopologicalSpace Y] (f : X ‚Üí Y)
      (_ : Continuous f) (U : Opens X), P f ‚Üí P (f ‚àò ((‚Üë) : U ‚Üí X)))
    (hP‚ÇÇ : ‚àÄ {X Y : Type u} [TopologicalSpace X] [TopologicalSpace Y] (f : X ‚Üí Y)
      (_ : Continuous f) {Œπ : Type u} (U : Œπ ‚Üí Opens X),
      IsOpenCover U ‚Üí (‚àÄ i, P (f ‚àò ((‚Üë) : U i ‚Üí X))) ‚Üí P f) :
    IsLocalAtSource (topologically P) := by
  apply IsLocalAtSource.mk'
  ¬∑ introv hf
    exact hP‚ÇÅ f.base f.continuous _ hf
  ¬∑ introv hU hf
    exact hP‚ÇÇ f.base f.continuous _ hU hf

/-- A variant of `topologically_isLocalAtSource`
that takes one iff statement instead of two implications. -/
lemma topologically_isLocalAtSource' [(topologically P).RespectsIso]
    (hP : ‚àÄ {X Y : Type u} [TopologicalSpace X] [TopologicalSpace Y] (f : X ‚Üí Y) {Œπ : Type u}
      (U : Œπ ‚Üí Opens X) (_ : IsOpenCover U) (_ : Continuous f),
      P f ‚Üî (‚àÄ i, P (f ‚àò ((‚Üë) : U i ‚Üí X)))) :
    IsLocalAtSource (topologically P) := by
  refine topologically_isLocalAtSource P ?_ (fun f hf _ U hU hf' ‚Ü¶ (hP f U hU hf).mpr hf')
  introv hf hs
  refine (hP f (![‚ä§, U] ‚àò Equiv.ulift) ?_ hf).mp hs ‚ü®1‚ü©
  rw [IsOpenCover, ‚Üê top_le_iff]
  exact le_iSup (![‚ä§, U] ‚àò Equiv.ulift) ‚ü®0‚ü©

theorem universally_isLocalAtSource (P : MorphismProperty Scheme)
    [IsLocalAtSource P] : IsLocalAtSource P.universally := by
  refine ‚ü®inferInstance, ?_‚ü©
  intro X Y f ùí∞
  refine ‚ü®fun hf ‚Ü¶ ?_, fun hf ‚Ü¶ ?_‚ü©
  ¬∑ intro i 
    apply MorphismProperty.universally_mk'
    intro T g _
    rw [‚Üê P.cancel_left_of_respectsIso (pullbackLeftPullbackSndIso g f _).hom,
      pullbackLeftPullbackSndIso_hom_fst]
    exact IsLocalAtSource.comp (hf _ _ _ (IsPullback.of_hasPullback ..)) _
  ¬∑ apply MorphismProperty.universally_mk'
    intro T g _
    rw [IsLocalAtSource.iff_of_openCover (P := P) (ùí∞.pullbackCover <| pullback.snd g f)]
    intro i
    rw [ùí∞.pullbackCover_map, ‚Üê pullbackLeftPullbackSndIso_hom_fst, P.cancel_left_of_respectsIso]
    exact hf i _ _ _ (IsPullback.of_hasPullback ..)


end AlgebraicGeometry
