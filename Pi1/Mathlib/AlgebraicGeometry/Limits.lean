import Mathlib.AlgebraicGeometry.Limits
import Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective
import Mathlib.AlgebraicGeometry.Morphisms.ClosedImmersion

universe u w

open CategoryTheory Limits

namespace AlgebraicGeometry

section General

lemma isClosedImmersion_of_isPreimmersion_of_isClosed
    {X Y : Scheme.{u}} (f : X ‚ü∂ Y) [IsPreimmersion f] (hf : IsClosed (Set.range f.base)) :
    IsClosedImmersion f where
  base_closed := ‚ü®Scheme.Hom.isEmbedding f, hf‚ü©

lemma isClosedImmersion_iff_isClosed_range_of_isPreimmersion {X Y : Scheme.{u}}
    (f : X ‚ü∂ Y) [IsPreimmersion f] :
    IsClosedImmersion f ‚Üî IsClosed (Set.range f.base) :=
  ‚ü®fun _ ‚Ü¶ f.isClosedEmbedding.isClosed_range,
    fun h ‚Ü¶ isClosedImmersion_of_isPreimmersion_of_isClosed f h‚ü©

--#
lemma isIso_of_isOpenImmersion_of_opensRange_eq_top {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
    [IsOpenImmersion f] (hf : f.opensRange = ‚ä§) :
    IsIso f := by
  rw [isIso_iff_isOpenImmersion]
  refine ‚ü®inferInstance, ?_‚ü©
  rw [TopCat.epi_iff_surjective, ‚Üê Set.range_eq_univ]
  exact TopologicalSpace.Opens.ext_iff.mp hf

--#
lemma SurjectiveOnStalks.mono_of_injective {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
    [SurjectiveOnStalks f] (hf : Function.Injective f.base) : Mono f := by
  refine (Scheme.forgetToLocallyRingedSpace ‚ãô
    LocallyRingedSpace.forgetToSheafedSpace).mono_of_mono_map ?_
  apply SheafedSpace.mono_of_base_injective_of_stalk_epi
  ¬∑ exact hf
  ¬∑ exact fun x ‚Ü¶ ConcreteCategory.epi_of_surjective _ (f.stalkMap_surjective x)

lemma nonempty_isColimit_cofanMk_of_aux {Œπ : Type u} {X : Œπ ‚Üí Scheme.{u}}
    {S : Scheme.{u}}
    (f : ‚àÄ i, X i ‚ü∂ S) [‚àÄ i, IsOpenImmersion (f i)]
    (hcov : ‚®Ü i, (f i).opensRange = ‚ä§)
    (hdisj : ‚àÄ i j : Œπ, i ‚â† j ‚Üí Disjoint (f i).opensRange (f j).opensRange) :
    Nonempty (IsColimit <| Cofan.mk S f) := by
  let ùí∞ : S.OpenCover := by
    refine .mkOfCovers Œπ X f (fun x ‚Ü¶ ?_)
    have : x ‚àà ‚®Ü i, (f i).opensRange := by rw [hcov]; trivial
    simpa using this
  have : SurjectiveOnStalks (Sigma.desc f) := by
    rw [IsLocalAtSource.iff_of_openCover (P := @SurjectiveOnStalks) (sigmaOpenCover X)]
    intro i
    simp
    infer_instance
  let ùí± : (‚àê X).OpenCover := sigmaOpenCover X
  have : Mono (Sigma.desc f) := by
    apply this.mono_of_injective
    intro x y hxy
    obtain ‚ü®i, a, rfl‚ü© := ùí±.exists_eq x
    obtain ‚ü®j, b, rfl‚ü© := ùí±.exists_eq y
    rw [‚Üê Scheme.comp_base_apply, ‚Üê Scheme.comp_base_apply] at hxy
    simp [ùí±] at hxy
    by_cases h : i = j
    ¬∑ subst h
      congr
      apply (f i).injective
      exact hxy
    ¬∑ simp [ùí±]
      have hdisj : (f i).opensRange ‚äì (f j).opensRange = ‚ä• := by
        rw [‚Üê disjoint_iff]
        exact hdisj i j h
      have : (f i).base a ‚àà (f i).opensRange ‚äì (f j).opensRange := by
        constructor
        ¬∑ use a
        ¬∑ rw [hxy]
          use b
      simp [hdisj] at this
  have : IsOpenImmersion (Sigma.desc f) := by
    rw [IsLocalAtTarget.iff_of_openCover (P := @IsOpenImmersion) ùí∞]
    ¬∑ intro i
      have : pullback.snd (Sigma.desc f) (ùí∞.map i) ‚â´ Sigma.Œπ X i =
          pullback.fst (Sigma.desc f) (ùí∞.map i) := by
        simp [ùí∞, ‚Üê cancel_mono (Sigma.desc f), pullback.condition]
      have : IsOpenImmersion (Scheme.Cover.pullbackHom ùí∞ (Sigma.desc f) i ‚â´ Sigma.Œπ X i) := by
        simp only [Scheme.Cover.pullbackCover_obj, Scheme.Cover.pullbackHom, this]
        infer_instance
      exact IsOpenImmersion.of_comp _ (Sigma.Œπ X i)
  rw [‚Üê Cofan.isColimit_iff_isIso_sigmaDesc (Cofan.mk S f)]
  show IsIso (Sigma.desc f)
  apply isIso_of_isOpenImmersion_of_opensRange_eq_top
  ¬∑ rw [eq_top_iff]
    rintro x hx
    have : x ‚àà ‚®Ü i, (f i).opensRange := by rwa [hcov]
    simp only [TopologicalSpace.Opens.iSup_mk, TopologicalSpace.Opens.mem_mk,
      Set.mem_iUnion] at this
    obtain ‚ü®i, y, rfl‚ü© := this
    use (Sigma.Œπ X i).base y
    simp [‚Üê Scheme.comp_base_apply]

lemma nonempty_isColimit_cofanMk_of {Œπ : Type w} [UnivLE.{w, u}] {X : Œπ ‚Üí Scheme.{u}}
    {S : Scheme.{u}}
    (f : ‚àÄ i, X i ‚ü∂ S) [‚àÄ i, IsOpenImmersion (f i)]
    (hcov : ‚®Ü i, (f i).opensRange = ‚ä§)
    (hdisj : ‚àÄ i j : Œπ, i ‚â† j ‚Üí Disjoint (f i).opensRange (f j).opensRange) :
    Nonempty (IsColimit <| Cofan.mk S f) := by
  obtain ‚ü®Œ∫, ‚ü®e‚ü©‚ü© := Small.equiv_small (Œ± := Œπ)
  constructor
  apply IsColimit.ofWhiskerEquivalence (Discrete.equivalence e).symm
  apply Nonempty.some
  apply nonempty_isColimit_cofanMk_of_aux (fun k ‚Ü¶ f (e.symm k))
  ¬∑ rw [‚Üê hcov]
    apply Equiv.iSup_congr
    intro
    rfl
  ¬∑ exact fun _ _ hij ‚Ü¶ hdisj _ _ fun h ‚Ü¶ hij <| e.symm.injective h

lemma nonempty_isColimit_binaryCofanMk_of_isCompl {X Y S : Scheme.{u}}
    (f : X ‚ü∂ S) (g : Y ‚ü∂ S) [IsOpenImmersion f] [IsOpenImmersion g]
    (hf : IsCompl f.opensRange g.opensRange) :
    Nonempty (IsColimit <| BinaryCofan.mk f g) := by
  have := pair X Y
  let c : Cofan _ := BinaryCofan.mk f g
  let c' : Cofan (fun j ‚Ü¶ (WalkingPair.casesOn j X Y : Scheme.{u})) :=
    Cofan.mk S (fun j ‚Ü¶ WalkingPair.casesOn j f g)
  let i : c ‚âÖ c' := by
    refine Cofan.ext (eqToIso rfl) ?_
    rintro (b|b) <;> rfl
  constructor
  refine IsColimit.ofIsoColimit ?_ i.symm
  apply Nonempty.some
  let fi (j : WalkingPair) : WalkingPair.casesOn j X Y ‚ü∂ S := WalkingPair.casesOn j f g
  convert nonempty_isColimit_cofanMk_of fi _ _
  ¬∑ intro i
    cases i <;> (simp [fi]; infer_instance)
  ¬∑ rw [‚Üê WalkingPair.equivBool.symm.iSup_comp]
    rw [iSup_bool_eq]
    simp only [WalkingPair.equivBool_symm_apply_true, WalkingPair.equivBool_symm_apply_false, fi]
    rw [‚Üê codisjoint_iff]
    exact hf.2
  ¬∑ intro i j hij
    match i, j with
    | .left, .right => simpa [fi] using hf.1
    | .right, .left => simpa [fi] using hf.1.symm

end General
