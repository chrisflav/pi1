/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Pi1.Mathlib.AlgebraicGeometry.Morphisms.Etale
import Pi1.Mathlib.AlgebraicGeometry.Morphisms.Smooth
import Pi1.Mathlib.AlgebraicGeometry.Morphisms.Flat
import Pi1.Mathlib.AlgebraicGeometry.Limits
import Pi1.Mathlib.CategoryTheory.Limits.MorphismProperty
import Pi1.Mathlib.RingTheory.Ideal.Quotient.Operations
import Pi1.Mathlib.Topology.Connected.Clopen
import Pi1.FundamentalGroup.FiniteEtale
import Pi1.FundamentalGroup.Rank
import Pi1.RingTheory.FinitePresentation
import Pi1.RingTheory.SmoothFlat
import Mathlib.CategoryTheory.Galois.Basic
import Mathlib.AlgebraicGeometry.Morphisms.Immersion
import Mathlib.AlgebraicGeometry.Morphisms.UniversallyInjective

/-!
# The category of finite √©tale morphisms over a connected base is a Galois category

Let `S` be a scheme and denote by `FEt S` the category of finite √©tale schemes over `S`. Then
`FEt S` is a `PreGaloisCategory`.
-/

universe u w

noncomputable section

open CategoryTheory Limits

instance {C : Type*} [Category C] {G : Type*} [Group G] [Finite G] [HasFiniteColimits C] :
    HasColimitsOfShape (SingleObj G) C := by
  obtain ‚ü®G', hg, hf, ‚ü®e‚ü©‚ü© := Finite.exists_type_univ_nonempty_mulEquiv G
  exact Limits.hasColimitsOfShape_of_equivalence e.toSingleObjEquiv.symm

instance {C D : Type*} [Category C] [Category D] (F : C ‚•§ D) {G : Type*} [Group G] [Finite G]
    [PreservesFiniteColimits F] :
    PreservesColimitsOfShape (SingleObj G) F := by
  obtain ‚ü®(G' : Type), hg, hf, ‚ü®e‚ü©‚ü© := Finite.exists_type_univ_nonempty_mulEquiv G
  exact Limits.preservesColimitsOfShape_of_equiv e.toSingleObjEquiv.symm F

namespace AlgebraicGeometry

section General

end General

namespace FiniteEtale

variable (X : Scheme.{u})

/-- The category of finite √©tale morphisms is a pre-galois category. -/
instance (X : Scheme.{u}) : PreGaloisCategory (FiniteEtale X) where
  hasQuotientsByFiniteGroups G := inferInstance
  monoInducesIsoOnDirectSummand {f g} i hi := by
    rw [FiniteEtale.mono_iff] at hi
    obtain ‚ü®ho, hc‚ü© := hi
    let A : Set g.left := Set.range i.hom.left.base
    have hA : IsClosed A := i.hom.left.isClosedEmbedding.isClosed_range
    let U : g.left.Opens := ‚ü®A·∂ú, hA.isOpen_compl‚ü©
    have : IsClosedImmersion U.Œπ := by
      apply isClosedImmersion_of_isPreimmersion_of_isClosed
      simp only [Scheme.Opens.range_Œπ, TopologicalSpace.Opens.coe_mk, isClosed_compl_iff, U, A]
      apply IsOpenImmersion.isOpen_range
    let u : FiniteEtale X := ‚ü®Over.mk (U.Œπ ‚â´ g.hom), by simpa using ‚ü®‚ü©‚ü©
    refine ‚ü®u, MorphismProperty.Over.homMk U.Œπ, ‚ü®?_‚ü©‚ü©
    apply isColimitOfReflects (MorphismProperty.Over.forget _ _ _ ‚ãô Over.forget _)
    apply (isColimitMapCoconeBinaryCofanEquiv _ _ _).invFun
    simp only [Functor.comp_obj, MorphismProperty.Comma.forget_obj, Over.forget_obj,
      Functor.comp_map, MorphismProperty.Comma.forget_map, Over.forget_map,
      MorphismProperty.Over.homMk_hom, Over.homMk_left]
    apply Nonempty.some
    apply nonempty_isColimit_binaryCofanMk_of_isCompl
    constructor
    ¬∑ rw [disjoint_iff]
      ext : 1
      simp [U, A]
    ¬∑ rw [codisjoint_iff]
      ext : 1
      simp [U, A]

lemma finite_of_isEtale_of_isAffineHom (X : Scheme.{u}) {Œ© : Type u} [Field Œ©]
    (f : X ‚ü∂ Spec (.of Œ©)) [IsEtale f] [IsAffineHom f] :
    Finite X := by
  have : IsAffine X := isAffine_of_isAffineHom f
  have : IsEtale f := inferInstance
  rw [HasRingHomProperty.iff_of_isAffine (P := @IsEtale)] at this
  let e : Œì(Spec (CommRingCat.of Œ©), ‚ä§) ‚âÉ+* Œ© :=
    (Scheme.ŒìSpecIso (.of Œ©)).commRingCatIsoToRingEquiv
  algebraize [(f.appTop.hom.comp e.symm.toRingHom)]
  have : Algebra.Etale Œ© Œì(X, ‚ä§) := by
    show (f.appTop.hom.comp e.symm.toRingHom).Etale
    apply RingHom.Etale.respectsIso.2
    assumption
  rw [Algebra.Etale.iff_exists_algEquiv_prod Œ© Œì(X, ‚ä§)] at this
  obtain ‚ü®I, hI, Ai, _, _, eq, h‚ü© := this
  let eq2 : X ‚âÖ ‚àê fun i ‚Ü¶ Spec (.of (Ai i)) :=
    X.isoSpec ‚â™‚â´ Scheme.Spec.mapIso eq.toRingEquiv.symm.toCommRingCatIso.op ‚â™‚â´
      (asIso (sigmaSpec (fun i ‚Ü¶ .of (Ai i)))).symm
  let eq3 : X ‚âÉ Œ£ i, Spec (.of <| Ai i) :=
    eq2.schemeIsoToHomeo.trans (sigmaMk _).symm
  apply Finite.of_equiv _ eq3.symm

instance {Œ© : Type u} [Field Œ©] (X : FiniteEtale (Spec (.of Œ©))) : Fintype X.left :=
  have : Finite X.left := finite_of_isEtale_of_isAffineHom X.left X.hom
  Fintype.ofFinite X.left

/-- -/
@[simps]
def forgetScheme (Œ© : Type u) [Field Œ©] : FiniteEtale (Spec (.of Œ©)) ‚•§ FintypeCat.{u} where
  obj X := FintypeCat.of X.left
  map {X Y} f := f.left.base

variable (Œ© : Type u) [Field Œ©]

lemma _root_.AlgebraicGeometry.IsFiniteEtale.SpecMap_iff {R S : CommRingCat.{u}}
    {f : R ‚ü∂ S} :
    IsFiniteEtale (Spec.map f) ‚Üî f.hom.FiniteEtale := by
  have := RingHom.toMorphismProperty_respectsIso_iff.mp RingHom.FiniteEtale.respectsIso
  simp only [HasAffineProperty.iff_of_isAffine (P := @IsFiniteEtale), affineAnd, and_iff_right]
  exact MorphismProperty.arrow_mk_iso_iff (RingHom.toMorphismProperty RingHom.FiniteEtale)
    (arrowIsoŒìSpecOfIsAffine f).symm

instance {Œπ : Type u} [Finite Œπ] (R : Type u) [CommRing R] :
    IsFiniteEtale (Spec.map <| CommRingCat.ofHom <| algebraMap R (Œπ ‚Üí R)) := by
  rw [IsFiniteEtale.SpecMap_iff]
  simp
  rw [RingHom.finiteEtale_algebraMap_iff]
  constructor

@[simps]
def inventScheme (Œ© : Type u) [Field Œ©] : FintypeCat.{u} ‚•§ FiniteEtale (Spec (.of Œ©)) where
  obj S :=
    mk (Spec.map <| CommRingCat.ofHom <| algebraMap Œ© (S ‚Üí Œ©))
  map {S T} f :=
    MorphismProperty.Over.homMk
      (Spec.map <| CommRingCat.ofHom <| Pi.ringHom (fun s ‚Ü¶ Pi.evalRingHom _ (f s))) <| by
      dsimp
      rw [‚Üê Spec.map_comp]
      rfl
  map_id S := by
    apply MorphismProperty.Over.Hom.ext
    simp [FiniteEtale]
    rfl
  map_comp {S T W} f g := by
    dsimp
    apply MorphismProperty.Over.Hom.ext
    simp [FiniteEtale]
    rw [‚Üê Spec.map_comp]
    rfl

instance (S : FintypeCat.{u}) :
    Fintype (Spec (CommRingCat.of (S.carrier ‚Üí Œ©))).toPresheafedSpace :=
  let f : Spec (CommRingCat.of (S.carrier ‚Üí Œ©)) ‚ü∂ Spec (.of Œ©) :=
    Spec.map (CommRingCat.ofHom <| algebraMap Œ© _)
  have : IsEtale f := by
    rw [HasRingHomProperty.Spec_iff (P := @IsEtale)]
    simp only [CommRingCat.hom_ofHom, RingHom.etale_algebraMap_iff]
    infer_instance
  have : Finite (Spec (CommRingCat.of (S.carrier ‚Üí Œ©))).toPresheafedSpace :=
    finite_of_isEtale_of_isAffineHom _ f
  Fintype.ofFinite _

def specPiEquiv (Œπ : Type u) [Finite Œπ] (K : Type u) [Field K] :
    Spec (.of (Œπ ‚Üí K)) ‚âÉ Œπ :=
  ((asIso (sigmaSpec (fun _ : Œπ ‚Ü¶ .of K))).schemeIsoToHomeo.toEquiv.symm.trans
      (sigmaMk (fun _ : Œπ ‚Ü¶ Spec (.of K))).toEquiv.symm).trans
    (Equiv.sigmaUnique Œπ (fun _ : Œπ ‚Ü¶ Spec (.of K)))

@[simp]
lemma specPiEquiv_symm_apply (Œπ : Type u) [Finite Œπ] (K : Type u) [Field K]
    (i : Œπ) : (specPiEquiv Œπ K).symm i =
      (Spec.map <| CommRingCat.ofHom <| Pi.evalRingHom _ i).base default := by
  simp [specPiEquiv, Iso.schemeIsoToHomeo, ‚Üê Scheme.comp_base_apply]

def inventForgetIso : inventScheme Œ© ‚ãô forgetScheme Œ© ‚âÖ ùü≠ FintypeCat :=
  Iso.symm <| NatIso.ofComponents
    (fun S ‚Ü¶ FintypeCat.equivEquivIso (specPiEquiv S Œ©).symm)
    (fun {S T} f ‚Ü¶ by
      simp only [Functor.id_obj, Functor.comp_obj, inventScheme_obj, Functor.id_map,
        forgetScheme_obj_carrier, mk_left, Functor.comp_map, inventScheme_map]
      ext x
      simp only [forgetScheme_obj_carrier, mk_left, FintypeCat.equivEquivIso, Equiv.coe_fn_mk,
        Equiv.symm_symm, FintypeCat.comp_apply, specPiEquiv_symm_apply, forgetScheme_map,
        MorphismProperty.Over.homMk_hom, Over.homMk_left]
      have : (Pi.evalRingHom (fun i ‚Ü¶ Œ©) x).comp
          (Pi.ringHom fun s ‚Ü¶ Pi.evalRingHom (fun a ‚Ü¶ Œ©) (f s)) = Pi.evalRingHom _ (f x) := rfl
      rw [‚Üê Scheme.comp_base_apply, ‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]
      rw [this])

instance (X : Scheme.{u}) (R : CommRingCat.{u}) [X.Over (Spec R)] (U : X.Opens) :
    Algebra R Œì(X, U) :=
  ((((X ‚Üò Spec R)).appLE ‚ä§ U (by simp)).hom.comp
    (Scheme.ŒìSpecIso R).commRingCatIsoToRingEquiv.symm.toRingHom).toAlgebra

instance (X : Scheme.{u}) (R : Type u) [CommRing R] [X.Over (Spec (.of R))] (U : X.Opens) :
    Algebra R Œì(X, U) :=
  ((((X ‚Üò Spec (.of R))).appLE ‚ä§ U (by simp)).hom.comp
    (Scheme.ŒìSpecIso (.of R)).commRingCatIsoToRingEquiv.symm.toRingHom).toAlgebra

@[simp]
lemma _root_.CategoryTheory.Iso.commRingCatIsoToRingEquiv_symm_apply {R S : CommRingCat.{u}}
    (e : R ‚âÖ S) (x : S) :
    e.commRingCatIsoToRingEquiv.symm x = e.symm.hom x := rfl

@[simp]
lemma _root_.CategoryTheory.Iso.commRingCatIsoToRingEquiv_symm_toRingHom {R S : CommRingCat.{u}}
    (e : R ‚âÖ S) :
    e.commRingCatIsoToRingEquiv.symm = e.symm.hom.hom := rfl

lemma appLE_comp_algebraMap {X Y : Scheme.{u}} (f : X ‚ü∂ Y) (R : Type u) [CommRing R]
    [X.Over (Spec (.of R))] [Y.Over (Spec (.of R))] [f.IsOver (Spec (.of R))]
    (U : Y.Opens) (V : X.Opens) (hUV : V ‚â§ f ‚Åª¬π·µÅ U) :
    (f.appLE U V hUV).hom.comp (algebraMap R Œì(Y, U)) = algebraMap R Œì(X, V) := by
  ext r
  simp only [RingHom.algebraMap_toAlgebra, Iso.commRingCatIsoToRingEquiv,
    RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
    RingEquiv.ofHomInv_symm_apply]
  rw [‚Üê CommRingCat.comp_apply]
  rw [Scheme.appLE_comp_appLE]
  simp

set_option pp.proofs true
instance (X : Scheme.{u}) (R : Type u) [CommRing R] [X.Over (Spec (.of R))]
    [IsEtale (X ‚Üò Spec (.of R))] [IsAffineHom (X ‚Üò Spec (.of R))] :
    Algebra.Etale R Œì(X, ‚ä§) := by
  rw [‚Üê RingHom.etale_algebraMap_iff, RingHom.algebraMap_toAlgebra]
  apply RingHom.Etale.respectsIso.2
  simp [Scheme.Hom.appLE]
  have : IsAffine X := isAffine_of_isAffineHom (X ‚Üò Spec (.of R))
  apply HasRingHomProperty.appTop @IsEtale
  infer_instance

instance (X : Scheme.{u}) (R : Type u) [Field R] [X.Over (Spec (.of R))]
    [IsEtale (X ‚Üò Spec (.of R))] [IsAffineHom (X ‚Üò Spec (.of R))] :
    Module.Finite R Œì(X, ‚ä§) :=
  Algebra.FormallyUnramified.finite_of_free R Œì(X, ‚ä§)

def _root_.AlgebraicGeometry.IsFiniteEtale.isoSpecPi (X : Scheme.{u}) [X.Over (Spec (.of Œ©))]
    [IsFiniteEtale (X ‚Üò Spec (.of Œ©))] :
    X ‚âÖ Spec (.of <| Œ† (m : MaximalSpectrum Œì(X, ‚ä§)), Œì(X, ‚ä§) ‚ß∏ m.asIdeal) :=
  have : IsAffine X := isAffine_of_isAffineHom (X ‚Üò Spec (.of Œ©))
  have := Algebra.FormallyUnramified.finite_of_free Œ© Œì(X, ‚ä§)
  have := Algebra.FormallyUnramified.isReduced_of_field Œ© Œì(X, ‚ä§)
  have : IsArtinianRing Œì(X, ‚ä§) := isArtinian_of_tower Œ© inferInstance
  X.isoSpec ‚â™‚â´ Scheme.Spec.mapIso ((IsArtinianRing.equivPi _).symm.toCommRingCatIso).op

@[simp]
lemma appTop_left_comp_algebraMap {X Y : FiniteEtale (Spec <| .of Œ©)} (f : X ‚ü∂ Y) :
    f.left.appTop.hom.comp (algebraMap Œ© Œì(Y.left, ‚ä§)) = algebraMap Œ© Œì(X.left, ‚ä§) := by
  simp [Scheme.Hom.appTop, Scheme.Hom.app_eq_appLE, appLE_comp_algebraMap]

@[simp]
lemma appTop_left_algebraMap {X Y : FiniteEtale (Spec <| .of Œ©)} (f : X ‚ü∂ Y) (x : Œ©) :
    f.left.appTop.hom (algebraMap Œ© Œì(Y.left, ‚ä§) x) = algebraMap Œ© Œì(X.left, ‚ä§) x :=
  DFunLike.congr_fun (appTop_left_comp_algebraMap Œ© f) x

instance {S : Scheme.{u}} (X : FiniteEtale S) : IsFiniteEtale (X.left ‚Üò S) :=
  X.prop

instance (X : FiniteEtale (Spec (.of Œ©))) : IsArtinianRing Œì(X.left, ‚ä§) :=
  isArtinian_of_tower Œ© inferInstance

instance (X : FiniteEtale (Spec (.of Œ©))) : _root_.IsReduced Œì(X.left, ‚ä§) :=
  Algebra.FormallyUnramified.isReduced_of_field Œ© Œì(X.left, ‚ä§)

def _root_.AlgebraicGeometry.IsFiniteEtale.isoSpecFun [IsSepClosed Œ©] (X : Scheme.{u})
    [X.Over (Spec (.of Œ©))] [IsFiniteEtale (X ‚Üò Spec (.of Œ©))] :
    X ‚âÖ Spec (.of <| X ‚Üí Œ©) :=
  have : IsAffine X := isAffine_of_isAffineHom (X ‚Üò Spec (.of Œ©))
  let i1 := IsFiniteEtale.isoSpecPi Œ© X
  have : IsArtinianRing Œì(X, ‚ä§) := isArtinian_of_tower Œ© inferInstance
  let e : X ‚âÉ MaximalSpectrum Œì(X, ‚ä§) :=
    X.isoSpec.schemeIsoToHomeo.toEquiv.trans IsArtinianRing.primeSpectrumEquivMaximalSpectrum
  have : _root_.IsReduced ‚ÜëŒì(X, ‚ä§) :=
    Algebra.FormallyUnramified.isReduced_of_field Œ© Œì(X, ‚ä§)
  let eo : Œì(X, ‚ä§) ‚âÉ‚Çê[Œ©] _ := { __ := IsArtinianRing.equivPi Œì(X, ‚ä§), commutes' := fun r ‚Ü¶ rfl }
  have : Algebra.FormallyEtale Œ© (Œ† (m : MaximalSpectrum Œì(X, ‚ä§)), (Œì(X, ‚ä§) ‚ß∏ m.asIdeal)) :=
    Algebra.FormallyEtale.of_equiv eo
  have (m : MaximalSpectrum Œì(X, ‚ä§)) : Algebra.FormallyEtale Œ© (Œì(X, ‚ä§) ‚ß∏ m.asIdeal) := by
    rw [Algebra.FormallyEtale.pi_iff] at this
    exact this m
  let _ (m : MaximalSpectrum Œì(X, ‚ä§)) : Field (Œì(X, ‚ä§) ‚ß∏ m.asIdeal) :=
    Ideal.Quotient.field m.asIdeal
  have (m : MaximalSpectrum Œì(X, ‚ä§)) : Algebra.IsSeparable Œ© (Œì(X, ‚ä§) ‚ß∏ m.asIdeal) := by
    rw [‚Üê Algebra.FormallyEtale.iff_isSeparable]
    infer_instance
  have hb (m : MaximalSpectrum Œì(X, ‚ä§)) :
      Function.Bijective (algebraMap Œ© (Œì(X, ‚ä§) ‚ß∏ m.asIdeal)) :=
    ‚ü®FaithfulSMul.algebraMap_injective _ _,
      IsSepClosed.algebraMap_surjective Œ© (Œì(X, ‚ä§) ‚ß∏ m.asIdeal)‚ü©
  let a (m : MaximalSpectrum Œì(X, ‚ä§)) : Œì(X, ‚ä§) ‚ß∏ m.asIdeal ‚âÉ+* Œ© :=
    (RingEquiv.ofBijective _ (hb m)).symm
  let o : (Œ† (m : MaximalSpectrum Œì(X, ‚ä§)), Œì(X, ‚ä§) ‚ß∏ m.asIdeal) ‚âÉ+* (X ‚Üí Œ©) :=
    (RingEquiv.piCongrRight a).trans (RingEquiv.piCongrLeft (fun _ ‚Ü¶ Œ©) e.symm)
  i1 ‚â™‚â´ Scheme.Spec.mapIso o.toCommRingCatIso.symm.op

lemma IsArtinianRing.equivPi_apply (R : Type*) [CommRing R] [IsArtinianRing R] [_root_.IsReduced R]
    (x : R) (m : MaximalSpectrum R) :
    (IsArtinianRing.equivPi R x) m = Ideal.Quotient.mk m.asIdeal x := rfl

@[reassoc (attr := simp)]
lemma _root_.AlgebraicGeometry.IsFiniteEtale.isoSpecFun_hom_SpecMap [IsSepClosed Œ©]
    (X : Scheme.{u}) [X.Over (Spec (.of Œ©))] [IsFiniteEtale (X ‚Üò Spec (.of Œ©))] :
    (IsFiniteEtale.isoSpecFun Œ© X).hom ‚â´
      Spec.map (CommRingCat.ofHom <| algebraMap Œ© (X ‚Üí Œ©)) = X ‚Üò Spec (.of Œ©) := by
  have : IsAffine X := isAffine_of_isAffineHom (X ‚Üò Spec (.of Œ©))
  rw [‚Üê cancel_epi X.isoSpec.inv]
  conv_rhs => rw [‚Üê Scheme.isoSpec_inv_naturality]
  simp only [IsFiniteEtale.isoSpecFun, IsFiniteEtale.isoSpecPi, RingEquiv.toRingHom_eq_coe,
    Iso.trans_assoc, Iso.trans_hom, Functor.mapIso_hom, Iso.op_hom, RingEquiv.toCommRingCatIso_hom,
    Scheme.Spec_map, Quiver.Hom.unop_op, Iso.symm_hom, RingEquiv.toCommRingCatIso_inv,
    Category.assoc, Iso.inv_hom_id_assoc, Scheme.isoSpec_Spec_inv, ‚Üê Spec.map_comp]
  congr 1
  have : IsArtinianRing Œì(X, ‚ä§) := isArtinian_of_tower Œ© inferInstance
  have : _root_.IsReduced ‚ÜëŒì(X, ‚ä§) := Algebra.FormallyUnramified.isReduced_of_field Œ© Œì(X, ‚ä§)
  ext x
  apply (IsArtinianRing.equivPi Œì(X, ‚ä§)).injective
  ext j
  simp [RingHom.algebraMap_toAlgebra]
  rw [IsArtinianRing.equivPi_apply]
  simp [Scheme.Hom.appTop, Scheme.Hom.appLE, Iso.commRingCatIsoToRingEquiv]

--@[simp]
lemma IsArtinianRing.equivPi_naturality_apply (R S : Type*) [CommRing R] [CommRing S]
    [IsArtinianRing R] [IsArtinianRing S] [_root_.IsReduced R] [_root_.IsReduced S]
    (f : R ‚Üí+* S) (x : R) :
    IsArtinianRing.equivPi S (f x) =
      Pi.ringHom
        (fun m ‚Ü¶ RingHom.comp
          (by exact Ideal.quotientMap m.asIdeal f (by simp))
          (Pi.evalRingHom _ ‚ü®Ideal.comap f m.asIdeal, IsArtinianRing.isMaximal_of_isPrime _‚ü©))
        (IsArtinianRing.equivPi R x) := by
  ext m
  simp [IsArtinianRing.equivPi, IsArtinianRing.quotNilradicalEquivPi]

instance (priority := 900) [IsAffine X] (Y : FiniteEtale X) : IsAffine Y.left :=
  let f : Y.left ‚ü∂ X := Y.hom
  isAffine_of_isAffineHom f

set_option maxHeartbeats 0 in
def forgetInventIso [IsSepClosed Œ©] : ùü≠ (FiniteEtale _) ‚âÖ forgetScheme Œ© ‚ãô inventScheme Œ© :=
  NatIso.ofComponents (fun X ‚Ü¶
    (MorphismProperty.Over.isoMk (IsFiniteEtale.isoSpecFun Œ© X.left))) <| fun {X Y} f ‚Ü¶ by
      apply MorphismProperty.Over.Hom.ext
      simp only [FiniteEtale, Functor.id_obj, Functor.comp_obj, inventScheme_obj,
        forgetScheme_obj_carrier, mk_left, Functor.id_map, IsFiniteEtale.isoSpecFun,
        RingEquiv.toRingHom_eq_coe, MorphismProperty.Comma.comp_hom, Comma.comp_left,
        MorphismProperty.Over.isoMk_hom_left, Iso.trans_hom, Functor.mapIso_hom, Iso.op_hom,
        Iso.symm_hom, RingEquiv.toCommRingCatIso_inv, Scheme.Spec_map, Quiver.Hom.unop_op,
        Functor.comp_map, inventScheme_map, forgetScheme_map, MorphismProperty.Over.homMk_hom,
        Over.homMk_left, Category.assoc]
      simp only [IsFiniteEtale.isoSpecPi, Iso.trans_hom, Functor.mapIso_hom, Iso.op_hom,
        RingEquiv.toCommRingCatIso_hom, Scheme.Spec_map, Quiver.Hom.unop_op, Category.assoc]
      rw [‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]
      rw [‚Üê Spec.map_comp, ‚Üê Spec.map_comp]
      rw [‚Üê Scheme.isoSpec_hom_naturality_assoc, ‚Üê Spec.map_comp]
      congr 2
      ext x
      simp only [CommRingCat.ofHom_comp, Category.assoc, CommRingCat.hom_comp,
        CommRingCat.hom_ofHom, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
        RingEquiv.symm_trans_apply, RingEquiv.piCongrRight_symm, RingEquiv.symm_symm]
      apply (IsArtinianRing.equivPi Œì(X.left, ‚ä§)).injective
      ext j
      simp only [RingEquiv.apply_symm_apply, RingEquiv.piCongrRight_apply,
        RingEquiv.piCongrLeft_symm_apply, Equiv.symm_symm, RingEquiv.piCongrLeft'_apply,
        Equiv.symm_trans_apply, Homeomorph.coe_symm_toEquiv, Pi.ringHom_apply, Pi.evalRingHom_apply,
        RingEquiv.coe_ofBijective]
      rw [IsArtinianRing.equivPi_naturality_apply]
      simp only [RingEquiv.apply_symm_apply, Pi.ringHom_apply, RingHom.coe_comp,
        Function.comp_apply, Pi.evalRingHom_apply, RingEquiv.piCongrRight_apply,
        RingEquiv.piCongrLeft_symm_apply, Equiv.symm_symm, RingEquiv.piCongrLeft'_apply,
        Equiv.symm_trans_apply, Homeomorph.coe_symm_toEquiv, RingEquiv.coe_ofBijective,
        Ideal.quotientMap_algebraMap, appTop_left_algebraMap, Ideal.Quotient.mk_algebraMap,
        algebraMap.coe_inj]
      congr 1
      simp only [Iso.schemeIsoToHomeo, Scheme.homeoOfIso_symm, Scheme.homeoOfIso_apply,
        Iso.symm_hom]
      rw [‚Üê Scheme.comp_base_apply, ‚Üê Scheme.isoSpec_inv_naturality]
      simp only [Scheme.comp_coeBase, TopCat.hom_comp, ContinuousMap.comp_apply]
      rfl

def equivFintypeCat [IsSepClosed Œ©] : FiniteEtale (Spec <| .of Œ©) ‚âå FintypeCat.{u} :=
  CategoryTheory.Equivalence.mk (forgetScheme Œ©) (inventScheme Œ©)
    (forgetInventIso Œ©) (inventForgetIso Œ©)

instance [IsSepClosed Œ©] : (forgetScheme Œ©).IsEquivalence :=
  (equivFintypeCat Œ©).isEquivalence_functor

variable {Œ© : Type u} [Field Œ©] [IsSepClosed Œ©] (Œæ : Spec (.of Œ©) ‚ü∂ X)
variable {X}

def fiber : FiniteEtale X ‚•§ FintypeCat :=
  pullback Œæ ‚ãô forgetScheme Œ©

variable {Œæ} in
def fiberPt {A : FiniteEtale X} (x : (fiber Œæ).obj A) : A.left :=
  (pullback.fst A.hom Œæ).base x

instance [IsSepClosed Œ©] : PreservesFiniteLimits (pullback Œæ) := by
  dsimp [pullback]
  apply AffineAnd.preservesFiniteLimits_pullback

instance (X : Type*) [TopologicalSpace X] [LocallyConnectedSpace X] :
    DiscreteTopology (ConnectedComponents X) := by
  rw [‚Üê singletons_open_iff_discrete]
  intro i
  obtain ‚ü®x, rfl‚ü© := ConnectedComponents.surjective_coe i
  rw [‚Üê ConnectedComponents.isQuotientMap_coe.isOpen_preimage,
    connectedComponents_preimage_singleton]
  exact isOpen_connectedComponent

def _root_.AlgebraicGeometry.Scheme.connCompOpen {X : Scheme.{u}} [Finite (ConnectedComponents X)]
    (i : ConnectedComponents X) : X.Opens :=
  ‚ü®ConnectedComponents.mk ‚Åª¬π' {i}, by
    rw [ConnectedComponents.isQuotientMap_coe.isOpen_preimage]
    exact isOpen_discrete {i}‚ü©

-- TODO: find the correct assumptions
def _root_.AlgebraicGeometry.Scheme.connectedComponents (X : Scheme.{u})
      [Finite (ConnectedComponents X)] :
    X.OpenCover where
  J := ConnectedComponents X
  obj c := X.connCompOpen c
  map c := (X.connCompOpen c).Œπ
  f x := ConnectedComponents.mk x
  covers x := by simp [Scheme.connCompOpen]

instance {X : Scheme.{u}} [Finite (ConnectedComponents X)] (i : ConnectedComponents X) :
    ConnectedSpace (X.connectedComponents.obj i) := by
  apply isConnected_iff_connectedSpace.mp
  simp only [Scheme.connCompOpen, TopologicalSpace.Opens.coe_mk]
  obtain ‚ü®x, rfl‚ü© := ConnectedComponents.surjective_coe i
  rw [connectedComponents_preimage_singleton]
  exact isConnected_connectedComponent

instance {X : Scheme.{u}} [Finite (ConnectedComponents X)] (i : ConnectedComponents X) :
    IsClosedImmersion (X.connectedComponents.map i) where
  base_closed := ‚ü®(X.connectedComponents.map i).isOpenEmbedding.isEmbedding, by
    simp [Scheme.connectedComponents, Scheme.connCompOpen,
      ConnectedComponents.isQuotientMap_coe.isClosed_preimage]‚ü©

lemma _root_.AlgebraicGeometry.IsFiniteEtale.isIso_of_isIso_snd {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z)
    (g : Y ‚ü∂ Z) [IsFiniteEtale f] [PreconnectedSpace Z] [Nonempty Y]
    [IsIso (pullback.snd f g)] : IsIso f := by
  rw [isIso_iff_rank_eq]
  obtain ‚ü®y‚ü© := ‚ÄπNonempty Y‚Ä∫
  ext z
  rw [finrank_eq_const_of_preconnectedSpace f z (g.base y), ‚Üê finrank_pullback_snd,
    finrank_eq_one_of_isIso, Pi.one_apply, Pi.one_apply]

instance {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [IsFiniteEtale g] :
    IsFiniteEtale (pullback.fst f g) :=
  MorphismProperty.pullback_fst _ _ ‚Äπ_‚Ä∫

instance {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) [IsFiniteEtale f] :
    IsFiniteEtale (pullback.snd f g) :=
  MorphismProperty.pullback_snd _ _ ‚Äπ_‚Ä∫

instance _root_.AlgebraicGeometry.IsFiniteEtale.surjective {X Y : Scheme.{u}} (f : X ‚ü∂ Y)
    [PreconnectedSpace Y] [Nonempty X] [IsFiniteEtale f] :
    Surjective f := by
  rw [‚Üê one_le_finrank_iff_surjective]
  obtain ‚ü®x‚ü© := ‚ÄπNonempty X‚Ä∫
  intro y
  rw [finrank_eq_const_of_preconnectedSpace _ _ (f.base x)]
  apply one_le_finrank_map

lemma _root_.AlgebraicGeometry.IsFiniteEtale.isIso_of_isIso_snd' {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z)
    (g : Y ‚ü∂ Z) [IsFiniteEtale f] [Finite (ConnectedComponents Z)]
    [‚àÄ i : ConnectedComponents Z, Nonempty ‚Üë(Limits.pullback g (Z.connectedComponents.map i))]
    [IsIso (pullback.snd f g)] : IsIso f := by
  show MorphismProperty.isomorphisms _ _
  rw [IsLocalAtTarget.iff_of_openCover (P := MorphismProperty.isomorphisms Scheme.{u})
    Z.connectedComponents]
  intro i
  simp
  dsimp [Scheme.Cover.pullbackHom]
  let g' := pullback.snd g (Z.connectedComponents.map i)
  have : pullback.snd (pullback.snd f (Z.connectedComponents.map i)) g' =
      (pullbackLeftPullbackSndIso f (Z.connectedComponents.map i) g').hom ‚â´
      (pullback.congrHom rfl pullback.condition.symm).hom ‚â´
      (pullbackAssoc f g g (Z.connectedComponents.map i)).inv ‚â´
      (pullback.map _ _ _ _ (pullback.snd _ _) (ùüô _) (ùüô _) rfl rfl) := by
    apply pullback.hom_ext <;> simp [g']
  have : IsIso (pullback.snd (pullback.snd f (Z.connectedComponents.map i)) g') := by
    rw [this]
    infer_instance
  apply IsFiniteEtale.isIso_of_isIso_snd _ g'

lemma isIso_of_isIso_left {A B : FiniteEtale X} (f : A ‚ü∂ B) [IsIso f.left] : IsIso f := by
  have : IsIso ((forget X ‚ãô Over.forget X).map f) := ‚Äπ_‚Ä∫
  exact isIso_of_reflects_iso f (forget X ‚ãô Over.forget X)

instance [ConnectedSpace X] (Y : FiniteEtale X) : Finite (ConnectedComponents Y.left) := by
  have : ConnectedSpace ‚Üë‚Üë((Functor.fromPUnit X).obj Y.right).toPresheafedSpace := by
    dsimp
    infer_instance
  exact Y.hom.isOpenMap.finite_connectedComponents_of_finite_preimage_singleton Y.hom.continuous
    Y.hom.isClosedMap (fun y ‚Ü¶ IsFinite.finite_preimage_singleton _ y)

open MorphismProperty

instance {Y : Scheme.{u}} [Nonempty Y] (g : Y ‚ü∂ X) [ConnectedSpace X] :
    (pullback g).ReflectsIsomorphisms := by
  constructor
  intro A B f hf
  have : IsIso f.left := by
    have : (pullbackRightPullbackFstIso B.hom g f.left).inv ‚â´
        pullback.snd f.left (pullback.fst B.hom g) =
          (pullback.congrHom (by simp) rfl).hom ‚â´ ((pullback g).map f).left := by
      apply pullback.hom_ext <;> simp
    have : IsIso (pullback.snd f.left (pullback.fst B.hom g)) := by
      rw [‚Üê isomorphisms.iff, ‚Üê cancel_left_of_respectsIso (.isomorphisms _)
        (pullbackRightPullbackFstIso B.hom g f.left).inv, isomorphisms.iff, this]
      infer_instance
    have (i : _root_.ConnectedComponents B.left) :
        Nonempty ‚Üë(Limits.pullback (pullback.fst B.hom g) (B.left.connectedComponents.map i)) := by
      let e := pullbackRightPullbackFstIso B.hom g (B.left.connectedComponents.map i)
      have : Nonempty ‚Üë(Limits.pullback (B.left.connectedComponents.map i ‚â´ B.hom) g) := by
        obtain ‚ü®y‚ü© := ‚ÄπNonempty Y‚Ä∫
        have : IsFiniteEtale (B.left.connectedComponents.map i ‚â´ B.hom) := by
          apply MorphismProperty.comp_mem
          constructor
          infer_instance
        have : Nonempty (B.left.connectedComponents.obj i) := inferInstance
        have : Surjective (B.left.connectedComponents.map i ‚â´ B.hom) := by
          convert IsFiniteEtale.surjective _
          simp
          infer_instance
          infer_instance
          infer_instance
        obtain ‚ü®z, hz‚ü© := (B.left.connectedComponents.map i ‚â´ B.hom).surjective (g.base y)
        obtain ‚ü®o, _‚ü© := Scheme.Pullback.exists_preimage_pullback _ _ hz
        use o
      exact ((pullbackSymmetry _ _).hom ‚â´ (pullbackRightPullbackFstIso B.hom g
        (B.left.connectedComponents.map i)).hom).homeomorph.nonempty
    apply IsFiniteEtale.isIso_of_isIso_snd' f.left (pullback.fst B.hom g)
  apply isIso_of_isIso_left

instance [ConnectedSpace X] [IsSepClosed Œ©] : (fiber Œæ).ReflectsIsomorphisms := by
  dsimp [fiber]
  infer_instance

instance [IsSepClosed Œ©] : PreservesFiniteColimits (fiber Œæ) := by
  dsimp [fiber]
  infer_instance

open PreGaloisCategory

/-- If `X` is a connected scheme and `Œæ : Spec Œ© ‚ü∂ X` is a geometric point,
taking fibers over `Œæ` is a fiber functor. -/
instance [ConnectedSpace X] [IsSepClosed Œ©] : FiberFunctor (fiber Œæ) where
  preservesTerminalObjects := by dsimp [fiber]; infer_instance
  preservesPullbacks := by dsimp [fiber]; infer_instance
  preservesQuotientsByFiniteGroups _ _ := inferInstance

/-- If `X` is a connected scheme, the category of finite √©tale schemes over `X`
is a Galois category. -/
instance [ConnectedSpace X] : GaloisCategory (FiniteEtale X) where
  hasFiberFunctor := by
    have : Nonempty X := inferInstance
    let x : X := ‚ÄπNonempty X‚Ä∫.some
    let k : Type u := X.residueField x
    let Œ© : Type u := AlgebraicClosure k
    let Œæ : Spec (.of Œ©) ‚ü∂ X :=
      Spec.map (CommRingCat.ofHom <| algebraMap k Œ©) ‚â´ X.fromSpecResidueField x
    exact ‚ü®fiber Œæ, ‚ü®inferInstance‚ü©‚ü©

/-- The √©tale fundamental group of a connected scheme `X` at the geometric point `Œæ` is
the automorphism group of the fiber functor at `Œæ`. -/
notation:arg "œÄ‚ÇÅ·µâ·µó" "(" x ")" => Aut (fiber x)

example : IsTopologicalGroup œÄ‚ÇÅ·µâ·µó(Œæ) := inferInstance
example : T2Space œÄ‚ÇÅ·µâ·µó(Œæ) := inferInstance
example : TotallyDisconnectedSpace œÄ‚ÇÅ·µâ·µó(Œæ) := inferInstance
example : CompactSpace œÄ‚ÇÅ·µâ·µó(Œæ) := inferInstance

end AlgebraicGeometry.FiniteEtale
