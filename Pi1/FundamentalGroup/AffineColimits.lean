/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.Algebra.Category.Ring.Under.Limits
import Mathlib.AlgebraicGeometry.Morphisms.Affine
import Mathlib.AlgebraicGeometry.Morphisms.Flat
import Mathlib.CategoryTheory.MorphismProperty.OverAdjunction
import Pi1.Mathlib.CategoryTheory.Comma.Over.Basic

/-!
# Category of schemes affine over an affine base

-/

universe t u

noncomputable section

open CategoryTheory Limits Opposite TensorProduct

section

def CategoryTheory.Limits.coneToFan {C D : Type*} [Category C] [Category D] (F : C ‚•§ D)
    {Œπ : Type*} (f : Œπ ‚Üí C) :
    Cone (Discrete.functor f ‚ãô F) ‚•§ Fan (fun i ‚Ü¶ F.obj (f i)) where
  obj c := Fan.mk c.pt (fun i ‚Ü¶ c.œÄ.app ‚ü®i‚ü©)
  map {c d} f := { hom := f.hom }

def CategoryTheory.Limits.coneEquivFan {C D : Type*} [Category C] [Category D] (F : C ‚•§ D)
    {Œπ : Type*} (f : Œπ ‚Üí C) :
    Cone (Discrete.functor f ‚ãô F) ‚âå Fan (fun i ‚Ü¶ F.obj (f i)) where
  functor := {
    obj := fun c ‚Ü¶ Fan.mk c.pt (fun i ‚Ü¶ c.œÄ.app ‚ü®i‚ü©)
    map := fun f ‚Ü¶ { hom := f.hom }
  }
  inverse := {
    obj := fun c ‚Ü¶ {
        pt := c.pt
        œÄ := Discrete.natTrans c.œÄ.app
      }
    map := fun f ‚Ü¶ { hom := f.hom }
  }
  unitIso := eqToIso rfl
  counitIso := eqToIso rfl

def CategoryTheory.Limits.preservesLimitsOfShapeDiscrete {C D J : Type*} [Category C] [Category D]
    (F : C ‚•§ D) [‚àÄ (f : J ‚Üí C), PreservesLimit (Discrete.functor f) F] :
    PreservesLimitsOfShape (Discrete J) F where
  preservesLimit :=
      preservesLimit_of_iso_diagram F (Discrete.natIsoFunctor).symm

end

section

variable {C : Type*} [Category C]

instance MorphismProperty.top_isStableUnderBaseChange :
    (‚ä§ : MorphismProperty C).IsStableUnderBaseChange where
  of_isPullback _ _ := trivial

instance (P : MorphismProperty C) : (‚ä§ : MorphismProperty C).HasOfPostcompProperty P where
  of_postcomp _ _ _ _ := trivial

end

section

variable {C : Type*} [Category C] (X : C)

def Over.opToUnderOp : Over (op X) ‚•§ (Under X)·µí·µñ where
  obj Y := ‚ü®Under.mk Y.hom.unop‚ü©
  map {Z Y} f := ‚ü®Under.homMk (f.left.unop) (by dsimp; rw [‚Üê unop_comp, Over.w])‚ü©

def Under.opToOverOp : (Under X)·µí·µñ ‚•§ Over (op X) where
  obj Y := Over.mk (Y.unop.hom.op)
  map {Z Y} f := Over.homMk f.unop.right.op <| by
    dsimp
    rw [‚Üê Under.w f.unop, op_comp]

def Over.equivUnderOp : Over (op X) ‚âå (Under X)·µí·µñ where
  functor := Over.opToUnderOp X
  inverse := Under.opToOverOp X
  unitIso := eqToIso rfl
  counitIso := eqToIso rfl

end

section

namespace CategoryTheory.Limits

variable {C D J : Type*} [Category C] [Category D] [Category J] (F : C ‚•§ D)
  (K : J ‚•§ C)

variable {K} in
def coconeHomOp {c c' : Cocone K} (f : c ‚ü∂ c') : c'.op ‚ü∂ c.op where
  hom := (f.hom).op
  w j := by simp [‚Üê op_comp]

variable {K} in
def coneHomOp {c c' : Cone K} (f : c ‚ü∂ c') : c'.op ‚ü∂ c.op where
  hom := f.hom.op
  w j := by simp [‚Üê op_comp]

variable {K} in
def coconeHomUnop {c c' : Cocone K} (f : c.op ‚ü∂ c'.op) : c' ‚ü∂ c where
  hom := f.hom.unop
  w j := by simpa using congrArg Quiver.Hom.unop (f.w ‚ü®j‚ü©)

variable {K} in
def coneHomUnop {c c' : Cone K} (f : c.op ‚ü∂ c'.op) : c' ‚ü∂ c where
  hom := f.hom.unop
  w j := by simpa using congrArg Quiver.Hom.unop (f.w ‚ü®j‚ü©)

def opOpCoconeEquiv : Cocone K ‚âå Cocone K.op.op where
  functor := {
      obj := fun c ‚Ü¶ c.op.op
      map := fun {c c'} f ‚Ü¶ coneHomOp (coconeHomOp f)
    }
  inverse := {
      obj := fun c ‚Ü¶ c.unop.unop
      map := fun {c c'} f ‚Ü¶ coconeHomUnop (coneHomUnop f)
    }
  unitIso := eqToIso rfl
  counitIso := eqToIso rfl

variable {K F} in
def isColimitOfIsLimitMapOp {c : Cocone K} (h : IsLimit (F.op.mapCone c.op)) :
    IsColimit (F.mapCocone c) :=
  IsColimit.ofCoconeEquiv (opOpCoconeEquiv (K ‚ãô F)) h.op

def preservesColimitOfOp [PreservesLimit K.op F.op] :
    PreservesColimit K F where
  preserves {_} hc := ‚ü®isColimitOfIsLimitMapOp (isLimitOfPreserves F.op hc.op)‚ü©

def preservesColimitsOfShapeOfOp [PreservesLimitsOfShape J·µí·µñ F.op] :
    PreservesColimitsOfShape J F where
  preservesColimit {K} := preservesColimitOfOp F K

end CategoryTheory.Limits

end

namespace AlgebraicGeometry

section

@[reassoc]
lemma Scheme.comp_app_top {X Y Z : Scheme.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).app ‚ä§ = g.app ‚ä§ ‚â´ f.app ‚ä§ :=
  rfl

end

section

variable {X Y S : Scheme.{u}} [IsAffine X] [IsAffine Y] [IsAffine S] {f : X ‚ü∂ S} {g : Y ‚ü∂ S}

lemma Œì_isPushout {P : Scheme.{u}} {fst : P ‚ü∂ X} {snd : P ‚ü∂ Y} (h : IsPullback fst snd f g) :
    IsPushout (f.app ‚ä§) (g.app ‚ä§) (fst.app ‚ä§) (snd.app ‚ä§) := by
  haveI : IsAffine (pullback f g) := inferInstance
  let iso : P ‚âÖ pullback f g := h.isoPullback
  haveI : IsAffine P := isAffine_of_isIso iso.hom
  let h' : IsPullback (AffineScheme.ofHom fst) (AffineScheme.ofHom snd)
      (AffineScheme.ofHom f) (AffineScheme.ofHom g) := by
    apply IsPullback.of_map (F := AffineScheme.forgetToScheme) h.w
    exact h
  have h'' := AffineScheme.Œì.rightOp.map_isPullback h'
  have h2 := h''.unop
  exact h2.flip

variable (f g)

def ŒìpullbackIsoPushout : Œì(pullback f g, ‚ä§) ‚âÖ pushout (f.app ‚ä§) (g.app ‚ä§) :=
  IsPushout.isoPushout (Œì_isPushout (f := f) (g := g) <| IsPullback.of_hasPullback f g)

@[reassoc (attr := simp)]
def inl_ŒìpullbackIsoPushout_inv :
    pushout.inl (f.app ‚ä§) (g.app ‚ä§) ‚â´ (ŒìpullbackIsoPushout f g).inv = (pullback.fst f g).app ‚ä§ := by
  simp [ŒìpullbackIsoPushout]

@[reassoc (attr := simp)]
def inr_ŒìpullbackIsoPushout_inv :
    pushout.inr (f.app ‚ä§) (g.app ‚ä§) ‚â´ (ŒìpullbackIsoPushout f g).inv = (pullback.snd f g).app ‚ä§ := by
  simp [ŒìpullbackIsoPushout]

@[reassoc (attr := simp)]
def app_fst_ŒìpullbackIsoPushout_hom :
     (pullback.fst f g).app ‚ä§ ‚â´ (ŒìpullbackIsoPushout f g).hom =
        pushout.inl (f.app ‚ä§) (g.app ‚ä§) := by
  simp [ŒìpullbackIsoPushout]

@[reassoc (attr := simp)]
def app_snd_ŒìpullbackIsoPushout_hom :
     (pullback.snd f g).app ‚ä§ ‚â´ (ŒìpullbackIsoPushout f g).hom =
        pushout.inr (f.app ‚ä§) (g.app ‚ä§) := by
  simp [ŒìpullbackIsoPushout]

end

variable (S : Scheme.{u}) (A : CommRingCat.{u})

section General

def Over.Spec : Over (op A) ‚•§ Over (Spec A) :=
  Over.post Scheme.Spec

def Over.Œì : (Over S)·µí·µñ ‚•§ Under Œì(S, ‚ä§) where
  obj X := Under.mk (X.unop.hom.app ‚ä§)
  map {X Y} f :=
    Under.homMk (f.unop.left.app ‚ä§) <| by
      dsimp
      erw [‚Üê Scheme.comp_app]
      rw [Over.w]

end General

/-- The category of affine morphisms with target `S`. -/
def Affine : Type _ := MorphismProperty.Over @IsAffineHom ‚ä§ S

variable {S} in
abbrev Affine.mk {X : Scheme.{u}} (f : X ‚ü∂ S) [IsAffineHom f] : Affine S :=
  MorphismProperty.Over.mk ‚ä§ f inferInstance

instance : Category (Affine S) :=
  inferInstanceAs <| Category (MorphismProperty.Over @IsAffineHom ‚ä§ S)

instance (X : Affine S) : IsAffineHom X.hom := X.prop

namespace Affine

@[simps! map_right obj_hom]
def Œì : (Affine S)·µí·µñ ‚•§ Under Œì(S, ‚ä§) :=
  (MorphismProperty.Over.forget @IsAffineHom ‚ä§ S).op ‚ãô Over.Œì S

section

variable {S} {T : Scheme.{u}} (f : T ‚ü∂ S)

abbrev pullback : Affine S ‚•§ Affine T :=
  MorphismProperty.Over.pullback _ _ f

abbrev map [IsAffineHom f] : Affine T ‚•§ Affine S :=
  MorphismProperty.Over.map ‚ä§ ‚ÄπIsAffineHom f‚Ä∫

abbrev mapPullbackAdjunction [IsAffineHom f] : map f ‚ä£ pullback f :=
  MorphismProperty.Over.mapPullbackAdj _ _ f _ trivial

instance [IsAffineHom f] : (map f).IsLeftAdjoint :=
  ‚ü®pullback f, ‚ü®mapPullbackAdjunction f‚ü©‚ü©

instance [IsAffineHom f] : (pullback f).IsRightAdjoint :=
  ‚ü®map f, ‚ü®mapPullbackAdjunction f‚ü©‚ü©

end

section AffineBase

variable [IsAffine S]

instance (X : Affine S) : IsAffine ((Functor.fromPUnit S).obj X.right) := ‚ÄπIsAffine S‚Ä∫

instance (X : Affine S) : IsAffine X.left := isAffine_of_isAffineHom X.hom

instance (X : Affine S) : IsAffine ((ùü≠ Scheme).obj X.left) := inferInstanceAs <| IsAffine X.left

def toAffine : Affine S ‚•§ Over (AffineScheme.mk S inferInstance) where
  obj X := Over.mk (AffineScheme.ofHom X.hom)
  map {X Y} f := Over.homMk (AffineScheme.ofHom f.left) (Over.w f.1)

def fromAffine : Over (AffineScheme.mk S inferInstance) ‚•§ Affine S where
  obj X := Affine.mk X.hom
  map {X Y} f := MorphismProperty.Over.homMk f.left (Over.w f)

lemma toAffine_fromAffine : toAffine S ‚ãô fromAffine S = ùü≠ _ := rfl
lemma fromAffine_toAffine : fromAffine S ‚ãô toAffine S = ùü≠ _ := rfl

/-- If `S` is affine, the category of affine morphisms with target `S` is equivalent
to the over category of `S` viewed as affine scheme. -/
def toAffineEquiv : Affine S ‚âå Over (AffineScheme.mk S inferInstance) where
  functor := toAffine S
  inverse := fromAffine S
  unitIso := eqToIso _
  counitIso := eqToIso _

instance : (toAffine S).IsEquivalence := (toAffineEquiv S).isEquivalence_functor
instance : (fromAffine S).IsEquivalence := (toAffineEquiv S).isEquivalence_inverse

def Over.AffineŒì : Over (AffineScheme.mk S inferInstance) ‚•§ (Under Œì(S, ‚ä§))·µí·µñ :=
  Over.post AffineScheme.Œì.rightOp ‚ãô (Over.equivUnderOp _).functor

instance : (Over.AffineŒì S).IsEquivalence := inferInstanceAs <|
  (Over.post AffineScheme.Œì.rightOp ‚ãô (Over.equivUnderOp _).functor).IsEquivalence

lemma Œì_eq : Œì S = (toAffine S ‚ãô Over.AffineŒì S).leftOp := rfl

instance : (Œì S).IsEquivalence :=
  inferInstanceAs <| (toAffine S ‚ãô Over.AffineŒì S).leftOp.IsEquivalence

section

variable {T : Scheme.{u}} (f : T ‚ü∂ S) [IsAffine T]

variable {S}

@[simps! hom_right]
def pullbackIsoPushout (X : (Affine S)·µí·µñ) :
    (Œì T).obj (op ((pullback f).obj X.unop)) ‚âÖ
      Under.mk (pushout.inr ((Œì S).obj X).hom (f.app ‚ä§)) :=
  Under.isoMk (ŒìpullbackIsoPushout X.unop.hom f) <| by simp

def pullbackŒìIso : (pullback f).op ‚ãô Œì T ‚âÖ Œì S ‚ãô Under.pushout (f.app ‚ä§) :=
  NatIso.ofComponents (pullbackIsoPushout f) <| by
    intro X Y g
    ext : 1
    dsimp
    rw [‚Üê cancel_epi (ŒìpullbackIsoPushout (unop X).hom f).inv]
    simp only [Functor.const_obj_obj, Functor.id_obj, TopologicalSpace.Opens.map_top,
      Iso.inv_hom_id_assoc]
    apply pushout.hom_ext
    ¬∑ rw [pushout.inl_desc]
      simp only [inl_ŒìpullbackIsoPushout_inv_assoc, TopologicalSpace.Opens.map_top]
      rw [‚Üê Scheme.comp_app_top_assoc]
      rw [pullback.lift_fst]
      simp
    ¬∑ simp only [inr_ŒìpullbackIsoPushout_inv_assoc, TopologicalSpace.Opens.map_top, colimit.Œπ_desc,
        Functor.id_obj, Functor.const_obj_obj, Œì_obj_hom, Under.mk_right, Œì_map_right, id_eq,
        PushoutCocone.mk_pt, PushoutCocone.mk_Œπ_app]
      rw [‚Üê Scheme.comp_app_top_assoc]
      rw [pullback.lift_snd]
      simp

end

variable {J : Type t} [Category J] [UnivLE.{t, u}]

instance [IsAffine S] : HasLimitsOfShape J (Affine S)·µí·µñ :=
  Adjunction.hasLimitsOfShape_of_equivalence (Œì S)

instance hasColimitsOfShape_of_isAffine : HasColimitsOfShape J (Affine S) :=
  Limits.hasColimitsOfShape_of_hasLimitsOfShape_op

variable (T : Scheme.{u}) [IsAffine T] (f : T ‚ü∂ S)

instance [Flat f] : PreservesFiniteLimits (Under.pushout (f.app ‚ä§)) := by
  apply CommRingCat.Under.preservesFiniteLimits_of_flat (Scheme.Hom.app f ‚ä§)
  apply HasRingHomProperty.appTop (P := @Flat)
  infer_instance

instance preservesColimitsOfShapePullback [PreservesLimitsOfShape J·µí·µñ (Under.pushout (f.app ‚ä§))] :
    PreservesColimitsOfShape J (pullback f) :=
  have : PreservesLimitsOfShape J·µí·µñ ((pullback f).op ‚ãô Œì T) :=
    preservesLimitsOfShape_of_natIso (pullbackŒìIso f).symm
  have : PreservesLimitsOfShape J·µí·µñ (pullback f).op :=
    preservesLimitsOfShape_of_reflects_of_preserves _ (Œì T)
  preservesColimitsOfShapeOfOp (pullback f)

instance [Flat f] : PreservesFiniteColimits (pullback f) where
  preservesFiniteColimits _ := inferInstance

end AffineBase

instance (X : Scheme.{u}) : HasFiniteColimits (Affine X) :=
  sorry

instance {X U : Scheme.{u}} (f : U ‚ü∂ X) [IsOpenImmersion f] [IsAffine U] :
    PreservesFiniteColimits (pullback f) :=
  sorry

instance {X U : Scheme.{u}} (f : U ‚ü∂ X) [IsOpenImmersion f] [IsAffine U] :
    PreservesFiniteColimits (pullback f) :=
  sorry

end Affine

end AlgebraicGeometry
